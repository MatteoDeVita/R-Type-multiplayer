@startuml sequence

package Client {
    class Client {
        - GameEngine _gameEngine
    }
}

package Server {

    ClientServerSide --o Party
    class ClientServerSide {
        - boost::udp::endpoint _ipAdress
    }

    note right of Party : Represent a party

    Party --o Server
    class Party {
        - std::vector<Client> _clients
    }

    class Server {
        - std::vector<Party> _parties
    }

}

package GameEngine {

    note right of Vector : Represent a vector in the window
    Vector --o Rectangle
    Vector --o Animation
    class Vector {
        - float _x
        - float _y
        + Vector(const float &x, const float &y)
        + vector &getVectorFloat()
        + void setVector(const Vector &vector)
    }

    Rectangle --o GameEngine
    class Rectangle {
        - Vector _origin
        - Vector _size
        + Rectangle(const Vector &origin, const Vector &size)
        + Rectangle &get()
    }


    Animation -- GameEngine
    class Animation {
        - std::vector<sf::sprite> _sprites

        + Animation(const std::string &filePath, const std::vector<Rectangle> &rectangles)
        + void run()
        + void setTrajectory(const std::vector<sf::vector2f> &positions)
    }

    GameEngine --* Client
    GameEngine --* Server

    interface IGameEngine {

    }

    class GameEngine {
        - std::vector<Animation> _animations
        + int loadAnimation(const std::string &filePath, const std::vector<Rectangle> &rectangles)

    }
}


@enduml
